# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '.\untitled.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import os
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QWidget, QLabel
from PyQt5.QtGui import QPainter, QPen, QColor, QFont
from PyQt5.QtCore import Qt, QTimer

class CircleTimer(QWidget):
    def __init__(self, total_time=30*60, parent=None):
        super().__init__(parent)
        self.setFixedSize(300, 300)
        self.total_time = int(total_time)
        self.remaining_time = int(total_time)
        self._current_mode = "work"
        self.timer = QTimer(self)
        self.timer.timeout.connect(self.update_timer)
        
        self.label = QLabel(self)
        self.label.setAlignment(Qt.AlignCenter)
        self.label.setGeometry(0, 0, 300, 300)
        font = QFont("Inter", 40)
        self.label.setFont(font)
        self.label.setStyleSheet("color: #3D3D3D; background: transparent;")
        self.update_label()

    def set_mode(self, mode):
        """Устанавливает текущий режим"""
        self._current_mode = mode
        self.update()

    def set_time(self, seconds):
        """Устанавливает новое время"""
        self.remaining_time = seconds
        self.update_label()
        self.update()

    def update_timer(self):
        self.remaining_time -= 1
        if self.remaining_time <= 0:
            self.remaining_time = 0
            self.timer.stop()
        self.update_label()
        self.update()

    def update_label(self):
        minutes = self.remaining_time // 60
        seconds = self.remaining_time % 60
        self.label.setText(f"{minutes:02}:{seconds:02}")


    def paintEvent(self, event):
        painter = QPainter(self)
        painter.setRenderHint(QPainter.Antialiasing)
        margin = 12
        rect = self.rect().adjusted(margin, margin, -margin, -margin)
        
        if self.total_time > 0:
            progress = float(self.remaining_time) / float(self.total_time)
        else:
            progress = 0.0
        
        # Выбираем цвет в зависимости от режима
        if self._current_mode == "short_break":
            color = QColor("#81FF5B")
        elif self._current_mode == "long_break":
            color = QColor("#3680E0")
        else:
            color = QColor("#F54242")
        
        pen = QPen(color, 12)
        painter.setPen(pen)
        
        remaining_angle = int(360.0 * progress * 16)
        painter.drawArc(rect, 90 * 16, -remaining_angle)
        
class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(392, 471)
        icon = QtGui.QIcon()
        # Получаем путь до .ico файла относительно текущего скрипта
        icon_path = os.path.join(os.path.dirname(__file__), "icon.ico")
        icon.addPixmap(QtGui.QPixmap(icon_path), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        MainWindow.setWindowIcon(icon)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(0, 0, 391, 451))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.VerticalLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.VerticalLayout.setContentsMargins(0, 0, 0, 0)
        self.VerticalLayout.setObjectName("VerticalLayout")
        self.stackedWidget = QtWidgets.QStackedWidget(self.verticalLayoutWidget)
        self.stackedWidget.setEnabled(True)
        self.stackedWidget.setObjectName("stackedWidget")
        self.Main_Page = QtWidgets.QWidget()
        self.Main_Page.setObjectName("Main_Page")
        self.TimerButton = QtWidgets.QPushButton(self.Main_Page)
        self.TimerButton.setGeometry(QtCore.QRect(140, 320, 131, 51))
        self.TimerButton.setObjectName("TimerButton")
        self.stackedWidget.addWidget(self.Main_Page)
        self.Settings_Page = QtWidgets.QWidget()
        self.Settings_Page.setObjectName("Settings_Page")
        self.LongBreakSlider = QtWidgets.QSlider(self.Settings_Page)
        self.LongBreakSlider.setGeometry(QtCore.QRect(40, 196, 309, 22))
        self.LongBreakSlider.setMinimum(20)
        self.LongBreakSlider.setMaximum(60)
        self.LongBreakSlider.setProperty("value", 30)
        self.LongBreakSlider.setOrientation(QtCore.Qt.Horizontal)
        self.LongBreakSlider.setObjectName("LongBreakSlider")
        self.CyclesSlider = QtWidgets.QSlider(self.Settings_Page)
        self.CyclesSlider.setGeometry(QtCore.QRect(40, 270, 309, 22))
        self.CyclesSlider.setMinimum(1)
        self.CyclesSlider.setMaximum(6)
        self.CyclesSlider.setProperty("value", 4)
        self.CyclesSlider.setOrientation(QtCore.Qt.Horizontal)
        self.CyclesSlider.setObjectName("CyclesSlider")
        self.ShortBreakSlider = QtWidgets.QSlider(self.Settings_Page)
        self.ShortBreakSlider.setGeometry(QtCore.QRect(40, 122, 309, 22))
        self.ShortBreakSlider.setMinimum(3)
        self.ShortBreakSlider.setMaximum(15)
        self.ShortBreakSlider.setProperty("value", 5)
        self.ShortBreakSlider.setOrientation(QtCore.Qt.Horizontal)
        self.ShortBreakSlider.setObjectName("ShortBreakSlider")
        self.WorkTimeSlider = QtWidgets.QSlider(self.Settings_Page)
        self.WorkTimeSlider.setGeometry(QtCore.QRect(40, 48, 309, 22))
        self.WorkTimeSlider.setMinimum(20)
        self.WorkTimeSlider.setMaximum(60)
        self.WorkTimeSlider.setProperty("value", 30)
        self.WorkTimeSlider.setTracking(True)
        self.WorkTimeSlider.setOrientation(QtCore.Qt.Horizontal)
        self.WorkTimeSlider.setObjectName("WorkTimeSlider")
        self.WorkTimeLabel = QtWidgets.QLabel(self.Settings_Page)
        self.WorkTimeLabel.setGeometry(QtCore.QRect(150, 20, 91, 20))
        self.WorkTimeLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.WorkTimeLabel.setObjectName("WorkTimeLabel")
        self.ShortBreakLabel = QtWidgets.QLabel(self.Settings_Page)
        self.ShortBreakLabel.setGeometry(QtCore.QRect(148, 90, 101, 20))
        self.ShortBreakLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.ShortBreakLabel.setObjectName("ShortBreakLabel")
        self.LongBreakLabel = QtWidgets.QLabel(self.Settings_Page)
        self.LongBreakLabel.setGeometry(QtCore.QRect(150, 170, 101, 20))
        self.LongBreakLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.LongBreakLabel.setObjectName("LongBreakLabel")
        self.CyclesLabel = QtWidgets.QLabel(self.Settings_Page)
        self.CyclesLabel.setGeometry(QtCore.QRect(164, 240, 71, 20))
        self.CyclesLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.CyclesLabel.setObjectName("CyclesLabel")
        self.ApplyButton = QtWidgets.QPushButton(self.Settings_Page)
        self.ApplyButton.setGeometry(QtCore.QRect(130, 330, 131, 61))
        self.ApplyButton.setObjectName("ApplyButton")
        self.stackedWidget.addWidget(self.Settings_Page)
        self.VerticalLayout.addWidget(self.stackedWidget)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 392, 21))
        self.menubar.setObjectName("menubar")
        self.menuSettings = QtWidgets.QMenu(self.menubar)
        self.menuSettings.setObjectName("menuSettings")
        self.menuThemes = QtWidgets.QMenu(self.menuSettings)
        self.menuThemes.setObjectName("menuThemes")
        self.menuHelp = QtWidgets.QMenu(self.menubar)
        self.menuHelp.setObjectName("menuHelp")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionThemes = QtWidgets.QAction(MainWindow)
        self.actionThemes.setObjectName("actionThemes")
        self.actionLight = QtWidgets.QAction(MainWindow)
        self.actionLight.setObjectName("actionLight")
        self.actionDark = QtWidgets.QAction(MainWindow)
        self.actionDark.setObjectName("actionDark")
        self.menuThemes.addAction(self.actionLight)
        self.menuThemes.addAction(self.actionDark)
        self.menuSettings.addAction(self.actionThemes)
        self.menuSettings.addAction(self.menuThemes.menuAction())
        self.menubar.addAction(self.menuSettings.menuAction())
        self.menubar.addAction(self.menuHelp.menuAction())
        
        self.retranslateUi(MainWindow)
        self.stackedWidget.setCurrentIndex(1)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Pomodoro Timer"))
        self.Main_Page.setWhatsThis(_translate("MainWindow", "<html><head/><body><p>This is page with Pomodoro timer, it shows settings and have a sound on/off button, skip cycle button....</p></body></html>"))
        self.TimerButton.setText(_translate("MainWindow", "PushButton"))
        self.WorkTimeLabel.setText(_translate("MainWindow", "Work Time"))
        self.ShortBreakLabel.setText(_translate("MainWindow", "Short Break"))
        self.LongBreakLabel.setText(_translate("MainWindow", "Long Break"))
        self.CyclesLabel.setText(_translate("MainWindow", "Cycles"))
        self.ApplyButton.setText(_translate("MainWindow", "Apply"))
        self.menuSettings.setTitle(_translate("MainWindow", "Settings"))
        self.menuThemes.setTitle(_translate("MainWindow", "Themes"))
        self.menuHelp.setTitle(_translate("MainWindow", "Help"))
        self.actionThemes.setText(_translate("MainWindow", "Set Timer..."))
        self.actionLight.setText(_translate("MainWindow", "Light"))
        self.actionDark.setText(_translate("MainWindow", "Dark"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
